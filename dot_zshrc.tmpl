# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$HOME/go/bin:$PATH

# Path to your oh-my-zsh installation.
ZSH=/usr/share/oh-my-zsh/

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  fzf
)

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

export EDITOR='nvim'

ZSH_CACHE_DIR=$HOME/.cache/oh-my-zsh
if [[ ! -d $ZSH_CACHE_DIR ]]; then
  mkdir $ZSH_CACHE_DIR
fi

source $ZSH/oh-my-zsh.sh

export GPG_TTY=$(tty)

source /usr/share/nvm/init-nvm.sh

eval "$(starship init zsh)"
eval "$(zoxide init zsh)"

# aliases
alias k=kubectl
alias kns=kubens
alias ktx=kubectx
alias clean-cr=find . -path "*/.git/*" -prune -o -type f -exec sed -i "s///g" {} \;
alias ls=exa
alias tree="exa --tree"
alias cd=z
alias cat='bat --theme=Nord --style=plain'
alias kubetoggle="starship toggle kubernetes"

# bitwarden session caching

# Path to Bitwarden session file
bw_sess_file="$HOME/.cache/bwsess/session"

# Configurable Bitwarden session time-to-live in seconds
bw_sess_ttl=3600 # 1 hour

# Check if Bitwarden session file exists
if [[ ! -e "$bw_sess_file" ]]; then
  # Create the file and any necessary directories
  mkdir -p "$(dirname "$bw_sess_file")" && touch "$bw_sess_file"
  # Retry until the command exits with 0
  while true; do
    # Set BW_SESSION with the result of "bw unlock --raw"
    BW_SESSION="$(bw unlock --raw)"
    # Check if the command exited with 0
    if [[ $? -eq 0 ]]; then
      # Write BW_SESSION to the file
      echo "$BW_SESSION" > "$bw_sess_file"
      # Export BW_SESSION
      export BW_SESSION="$BW_SESSION"
      break
    fi
  done
fi

# Get the last modification time of the file in seconds since epoch
last_modification_time=$(stat -c %Y "$bw_sess_file")

# Get the current time in seconds since epoch
current_time=$(date +%s)

# Calculate the time difference between the last modification time and the current time
time_diff=$((current_time - last_modification_time))

# Check if the time difference is less than the configurable Bitwarden session TTL
if [[ $time_diff -le $bw_sess_ttl ]]; then
  # Export BW_SESSION with the contents of the file
  export BW_SESSION="$(cat "$bw_sess_file")"
else
  # Clear the Bitwarden session file
  echo >$bw_sess_file
  # Retry until the command exits with 0
  while true; do
    # Set BW_SESSION with the result of "bw unlock --raw"
    BW_SESSION="$(bw unlock --raw)"
    # Check if the command exited with 0
    if [[ $? -eq 0 ]]; then
      # Write BW_SESSION to the file
      echo "$BW_SESSION" > "$bw_sess_file"
      # Export BW_SESSION
      export BW_SESSION="$BW_SESSION"
      break
    fi
  done
fi
